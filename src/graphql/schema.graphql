type Property {
  id: ID!
  city: String!
  street: String!
  state: State!
  zipCode: String!
  lat: Float!
  long: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  weatherData: WeatherData
}

type WeatherData {
  id: ID!
  propertyId: String!
  temperature: Float!
  weatherCode: Int!
  weatherDescriptions: [String!]!
  windSpeed: Float!
  windDegree: Int!
  windDir: String!
  pressure: Int!
  precip: Float!
  humidity: Int!
  cloudCover: Int!
  feelsLike: Float!
  uvIndex: Int!
  visibility: Int!
  isDay: String!
  observationTime: String!
  lastUpdated: DateTime!
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
  DC
  PR
}

scalar DateTime

type Query {
  getProperties(
    sortBy: PropertySortField
    sortOrder: SortOrder
    filter: PropertyFilter
    page: Int = 1
    pageSize: Int = 10
  ): PropertyPaginatedResult!
  getProperty(id: ID!): Property
}

type PropertyPaginatedResult {
  properties: [Property!]!
  pageInfo: PropertyPageInfo!
  totalCount: Int!
}

type PropertyPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  currentPage: Int!
  totalPages: Int!
}

input PropertyFilter {
  city: String
  state: State
  zipCode: String
}

enum PropertySortField {
  CREATED_AT
}

enum SortOrder {
  ASC
  DESC
}

type Mutation {
  createProperty(input: CreatePropertyInput!): Property!
  deleteProperty(id: ID!): Boolean!
}

input CreatePropertyInput {
  city: String!
  street: String!
  state: State!
  zipCode: String!
}
